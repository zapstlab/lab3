tosca_definitions_version: cloudify_dsl_1_3

description: >
  Utworz maszyne wirtualna z Apache Tomcat
imports:
  - http://www.getcloudify.org/spec/cloudify/4.6/types.yaml
  - plugin:cloudify-openstack-plugin?version=2.14.7

inputs:

  username:
    description: OS_USERNAME jak w pliku openrc.sh
    default: { get_secret: os_username }

  password:
    description: OS_PASSWORD jak w pliku openrc.sh
    default: { get_secret: os_password }

  tenant_name:
    description: OS_PROJECT_NAME jak w pliku openrc.sh - nazwa projektu OpenStack, na którym pracujemy
    default: { get_secret: os_tenant_name }
    
  auth_url:
    description: OS_AUTH_URL jak w pliku openrc.sh
    default: { get_secret: os_keystone_url }
    
  region:
    description: Nazwa regionu OpenStack 
    default: { get_secret: os_region }

  external_network_name:
    description: Nazwa sieci external do polaczen ssh; w labie ZSUT.ITPW jest to sieć o nazwie external (po utworzeniu maszyny Cloudify, sprawdzić w dashboardzie OS)
    
  mgt_router_id:
    description: Id routera podlaczonego do sieci external - sprawdzić "Sieci" (Networks) w dashboardzie OS
    
  nameservers:
    default: [8.8.4.4, 8.8.8.8]

  private_subnet_cidr:
    default: 192.168.100.0/24

  private_subnet_allocation_pools:
    default:
    - start: 192.168.100.10
      end: 192.168.100.250

  image_id:
    description: Identyfikator obrazu maszyny Ubuntu 14.04

  flavor_id:
    description: Identyfikator odmiany maszyny wirtualnej

  key_pair_name:
    description: nazwa pary kluczy do logowania w sesji ssh
    default: LAB

  ssh_agent_user:
    description: Nazwa uzytkownika dla agenta ssh w maszynie wirtualnej
    default: ubuntu

  ssh_private_key_path:
    description: Sciezka klucza prywatnego do komunikacji z maszyna wirtualna
    default: ~/.ssh/id_rsa
    
dsl_definitions:

  client_config: &client_config
    username: { get_input: username }
    password: { get_input: password }
    tenant_name: { get_input: tenant_name }
    auth_url: { get_input: auth_url }
    region: { get_input: region }
        
node_templates:
              
  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      
  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *client_config

  mgt_network_router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *client_config
      use_external_resource: true
      resource_id: { get_input: mgt_router_id }
    relationships:
    - type: cloudify.relationships.connected_to
      target: external_network

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *client_config
      subnet:
        ip_version: 4
        cidr: { get_input: private_subnet_cidr }
        dns_nameservers: { get_input: nameservers }
        allocation_pools: { get_input: private_subnet_allocation_pools }
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_network
    - type: cloudify.openstack.subnet_connected_to_router
      target: mgt_network_router

  host:
    type: cloudify.openstack.nodes.Server
    instances:
      deploy: 1
    properties:
      openstack_config: *client_config
      agent_config:
        install_method: init_script
        user: { get_input: ssh_agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
        name: apache-http                  
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.openstack.server_connected_to_port
        target: host_private_port
  
  host_private_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *client_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: apache_httpd_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: apache_httpd_ip        
        
  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *client_config
      resource_id: { get_input: key_pair_name }
      private_key_path: { get_input: ssh_private_key_path }
      
  apache_httpd_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *client_config
      security_group:
        description: Apache HTTP Security Group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ http_web_server, port ] }
  
  http_web_server:
    type: cloudify.nodes.WebServer
    properties:
      port: 80
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        
  apache_httpd_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *client_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

outputs:
  apache_httpd_priv_ip:
    description: Apache HTTP Private IP
    value:  { get_attribute: [ host, ip ] }
  apache_endpoint:
    description: Apache HTTP Endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ apache_httpd_ip, floating_ip_address ] }
      - ':'
      - { get_property: [ http_web_server, port ] }
      - '/'
